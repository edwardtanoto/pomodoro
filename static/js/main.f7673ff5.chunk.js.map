{"version":3,"sources":["TimerHeader/components/TimerHeader.jsx","timerState.js","TimerDisplay/components/TimerDisplay.jsx","TimerButton/components/TimerButton.jsx","TimerConfig/components/TimerConfig.jsx","Timer/component/Timer.jsx","App.js","serviceWorker.js","index.js"],"names":["TimerHeader","react_default","a","createElement","className","NOT_SET","leftPad","val","concat","TimerDisplay","props","timerState","height","src","frameborder","allow","allowfullscreen","currentTime","get","TimerButton","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getButton","bind","assertThisInitialized","onClick","startTimer","stopTimer","Component","TimerConfig","handleChange","ev","newBaseTime","baseTime","target","id","subtract","add","parseInt","value","setBaseTime","htmlFor","type","min","defaultValue","onChange","Timer","state","moment","duration","timer","reduceTimer","setState","setInterval","clearInterval","newTime","completeTimer","components_TimerHeader","components_TimerDisplay","components_TimerButton","components_TimerConfig","React","App","component_Timer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f7673ff5.chunk.js","sourcesContent":["import React from 'react';\n\nconst TimerHeader = ()=>(\n    <div className=\"row\">\n                 <h1 className=\"text-center\">Pomodoro App</h1>\n            </div>\n)\n\nexport default TimerHeader;","export const NOT_SET=0;\nexport const  RUNNING=1;\nexport const  COMPLETE=2;","import React from 'react';\nimport * as timerState from '../../timerState';\n\nconst leftPad = (val) =>{\n    if(val<10) return `0${val}`;\n        return `${val}`;\n}\n\nconst TimerDisplay=(props)=>(\n    <div>\n        <div className=\"row center-block\">\n        {\n            (props.timerState === timerState.COMPLETE)&&\n            <iframe className=\"center-block youtube-responsive-width\"height=\"315\" src=\"https://www.youtube.com/embed/GgVcgbtHY9k?autoplay=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n        }\n        </div>\n   \n    <div className=\"row\">\n                 <h3 className=\"text-center\">{`${leftPad(props.currentTime.get(\"hours\"))}:${leftPad(props.currentTime.get(\"minutes\"))}:${leftPad(props.currentTime.get(\"seconds\"))}`}</h3>\n            </div>\n    </div>\n);\n\nexport default TimerDisplay;","import React,{Component} from 'react';\nimport * as timerState from '../../timerState'\n\nclass TimerButton extends Component{\n    constructor(){\n        super();\n\n        this.getButton = this.getButton.bind(this)\n    }\n\n    getButton(){\n        if(this.props.timerState === timerState.NOT_SET)\n            return  <button className=\"btn btn-primary center-block\" onClick={this.props.startTimer}>Start</button>\n        \n        if(this.props.timerState === timerState.RUNNING)\n             return <button className=\"btn btn-danger center-block\" onClick={this.props.stopTimer}>Stop</button>\n\n        if(this.props.timerState === timerState.COMPLETE)\n             return <button className=\"btn btn-info center-block\" onClick={this.props.stopTimer}>Reset</button>\n    }\n\n    render(){\n        return(\n          <div className=\"row\">\n           {this.getButton()}\n          </div>\n        )\n    }\n}\n\nexport default TimerButton;","import React, { Component } from 'react';\n\n\nclass TimerConfig extends Component{\n    constructor(){\n        super();\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n        handleChange(ev){\n            const newBaseTime = this.props.baseTime;\n\n            if(ev.target.id=== 'hours') newBaseTime.subtract(newBaseTime.get('hours'), 'hours').add(parseInt(ev.target.value,10), 'hours');\n            if(ev.target.id=== 'minutes') newBaseTime.subtract(newBaseTime.get('minutes'), 'minutes').add(parseInt(ev.target.value,10), 'minutes');\n            if(ev.target.id=== 'seconds') newBaseTime.subtract(newBaseTime.get('seconds'), 'seconds').add(parseInt(ev.target.value,10), 'seconds');\n\n            this.props.setBaseTime(newBaseTime)\n        }\n\n    render(){\n        return(\n            <div>\n            <div className=\"row\">\n            <h2 className=\"text-primary\">Set Timer</h2>\n        </div>\n        <div className=\"row\">\n        \n         <div className=\"form-group\">\n             <div className=\"col-sm-3\">\n                 <label htmlFor=\"hours\">Hours</label>\n             </div>\n             <div className=\"col-sm-9\">\n                 <input id=\"hours\" \n                 className=\"form-control\" \n                 type=\"number\" \n                 min= \"0\"\n                 defaultValue={this.props.baseTime.get(\"hours\")} \n                 onChange={this.handleChange}/>\n             </div>         \n        </div>\n             <div className=\"form-group\">\n             <div className=\"col-sm-3\">\n                 <label htmlFor=\"minutes\">Minutes</label>\n             </div>\n             <div className=\"col-sm-9\">\n                 <input id=\"minutes\" \n                 className=\"form-control\" \n                 type=\"number\" \n                 min= \"0\"\n                 defaultValue={this.props.baseTime.get(\"minutes\")} \n                 onChange={this.handleChange}/>\n             </div>         \n        </div>\n             <div className=\"form-group\">\n             <div className=\"col-sm-3\">\n                 <label htmlFor=\"seconds\">Seconds</label>\n             </div>\n             <div className=\"col-sm-9\">\n                 <input id=\"seconds\" \n                 className=\"form-control\" \n                 type=\"number\" \n                 min= \"0\"\n                 defaultValue={this.props.baseTime.get(\"seconds\")} \n                 onChange={this.handleChange}/>\n             </div>         \n             </div>\n        \n        </div>\n        </div>\n        )\n    }\n} \n   \n\nexport default TimerConfig;","import React from 'react';\nimport moment from 'moment';\nimport TimerHeader from '../../TimerHeader/components/TimerHeader'\nimport TimerDisplay from '../../TimerDisplay/components/TimerDisplay';\nimport TimerButton from '../../TimerButton/components/TimerButton';\nimport TimerConfig from '../../TimerConfig/components/TimerConfig';\nimport * as timerState from '../../timerState';\n\n\nclass Timer extends React.Component{\n    constructor(){\n        super();\n        this.state={\n            currentTime: moment.duration(25,'minutes'),\n            baseTime: moment.duration(25,'minutes'),\n            timerState: timerState.NOT_SET,\n            timer: null,\n        };\n        this.setBaseTime = this.setBaseTime.bind(this);\n        this.startTimer = this.startTimer.bind(this);\n        this.reduceTimer = this.reduceTimer.bind(this);\n        this.stopTimer = this.stopTimer.bind(this);\n    }\n    setBaseTime(newBaseTime){\n\n        this.setState({\n            baseTime: newBaseTime,\n            currentTime :newBaseTime,\n\n        })\n    }\n\n    startTimer(){\n        this.setState({\n            timerState: timerState.RUNNING,\n            timer : setInterval(this.reduceTimer,1000)\n        })\n    }\n\n    stopTimer(){\n        if(this.state.timer){\n            clearInterval(this.state.timer);\n        }\n\n        this.setState({\n            timerState:timerState.NOT_SET,\n            timer:null,\n            currentTime: moment.duration(this.state.baseTime),\n        })\n    }\n\n    completeTimer(){\n        if(this.state.timer){\n            clearInterval(this.state.timer);\n        }\n\n        this.setState({\n            timerState:timerState.COMPLETE,\n            timer:null,\n        })\n    }\n\n    reduceTimer(){\n        if(this.state.currentTime.get('hours')===0 &&\n           this.state.currentTime.get('minutes')===0 &&\n           this.state.currentTime.get('seconds')===0)\n        {\n            this.completeTimer();\n            return;\n        }\n\n        const newTime= moment.duration(this.state.currentTime);\n        newTime.subtract(1,'seconds');\n\n        this.setState({\n            currentTime :newTime,\n        });\n    }\n\n    render()\n    {\n        return(\n        <div className=\"container-fluid\">\n        <TimerHeader />\n        <TimerDisplay \n        currentTime={this.state.currentTime}\n        timerState={this.state.timerState}\n        />\n        <TimerButton \n        startTimer={this.startTimer} \n        timerState={this.state.timerState}\n        stopTimer={this.stopTimer}\n        />\n        {\n        (this.state.timerState !== timerState.RUNNING)\n        &&\n        <TimerConfig \n        baseTime={this.state.baseTime}\n        setBaseTime={this.setBaseTime}\n        />\n        }\n      </div>\n        );\n    }\n  \n}\n\nexport default Timer;","import React, { Component } from 'react';\nimport Timer from './Timer/component/Timer';\nimport './App.css';\n\n\nclass App extends Component {\n  render() {\n    return (\n       <div className=\"card app-content center-block\">\n        <div className=\"card-body\">\n          <Timer />\n        </div>\n      </div>\n\n     \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}